=== API File Comparison Report ===
Flat file: src/services/api/auth-service.ts (219 lines)
Modular file: src/services/api/modules/auth/auth-service.ts (113 lines)

The flat structure file appears to be more complete (has more lines).

=== Differences Summary ===

=== Detailed Differences ===
@@ -1,44 +1,25 @@
-import { apiClient } from './api-client';
+import { apiClient } from '../../api-client';
+import { UserInfo, AuthTokens, UserProfile } from '../../../../types/api-types';
+import axios, { AxiosResponse } from 'axios';
 
 /**
- * Auth token response interface
- */
-export interface AuthTokens {
-  accessToken: string;
-  refreshToken: string;
-  expiresIn: number;
-}
-
-/**
- * User info interface
- */
-export interface UserInfo {
-  id: string;
-  email: string;
-  username?: string;
-  walletAddress?: string;
-  role: string;
-  emailVerified: boolean;
-  createdAt: string;
-  updatedAt: string;
-  [key: string]: any;
-}
-
-/**
- * Service for authentication operations
+ * Service for handling authentication related operations
  */
 class AuthService {
+  private userEndpoint = '/api/user';
+  private authEndpoint = '/api/auth';
+  
   /**
-   * Login with email and password
-   * @param email User email
-   * @param password User password
-   * @returns Promise with auth tokens
+   * Login the user with email and password
    */
   async login(email: string, password: string): Promise<AuthTokens> {
     try {
-      const response = await apiClient.post<AuthTokens>('/auth/login', { email, password });
+      const response = await apiClient.post<AuthTokens>(`${this.authEndpoint}/login`, {
+        email,
+        password,
+      });
       
-      // Store tokens in localStorage
+      // Store tokens
       localStorage.setItem('accessToken', response.data.accessToken);
       localStorage.setItem('refreshToken', response.data.refreshToken);
       
@@ -48,27 +29,19 @@
       throw error;
     }
   }
-
+  
   /**
    * Register a new user
-   * @param email User email
-   * @param password User password
-   * @param referralCode Optional referral code
-   * @returns Promise with auth tokens
-   */
-  async register(
-    email: string, 
-    password: string, 
-    referralCode?: string
-  ): Promise<AuthTokens> {
+   */
+  async register(email: string, password: string, referralCode?: string): Promise<AuthTokens> {
     try {
-      const response = await apiClient.post<AuthTokens>('/auth/register', { 
-        email, 
+      const response = await apiClient.post<AuthTokens>(`${this.authEndpoint}/register`, {
+        email,
         password,
-        referralCode
+        referralCode,
       });
       
-      // Store tokens in localStorage
+      // Store tokens
       localStorage.setItem('accessToken', response.data.accessToken);
       localStorage.setItem('refreshToken', response.data.refreshToken);
       
@@ -78,143 +51,63 @@
       throw error;
     }
   }
-
+  
   /**
-   * Request password reset email
-   * @param email User email
-   * @returns Promise with success message
+   * Get the current user profile
    */
-  async forgotPassword(email: string): Promise<any> {
+  async getUserProfile(): Promise<{ data: UserProfile }> {
     try {
-      const response = await apiClient.post('/auth/forgot-password', { email });
-      return response.data;
+      const response = await apiClient.get<UserProfile>(`${this.userEndpoint}/profile`);
+      return { data: response.data };
     } catch (error) {
-      console.error('Forgot password error:', error);
+      console.error('Get user profile error:', error);
       throw error;
     }
   }
-
+  
   /**
-   * Reset password with token
-   * @param token Reset token
-   * @param newPassword New password
-   * @returns Promise with success message
+   * Login with wallet signature
    */
-  async resetPassword(token: string, newPassword: string): Promise<any> {
+  async loginWithWallet(address: string, signature: string, message: string): Promise<{ data: { user: UserProfile, accessToken: string, refreshToken: string } }> {
     try {
-      const response = await apiClient.post('/auth/reset-password', { 
-        token, 
-        newPassword
+      const response = await apiClient.post(`${this.authEndpoint}/wallet-login`, {
+        address,
+        signature,
+        message,
       });
-      return response.data;
-    } catch (error) {
-      console.error('Reset password error:', error);
-      throw error;
-    }
-  }
-
-  /**
-   * Update user password
-   * @param currentPassword Current password
-   * @param newPassword New password
-   * @returns Promise with success message
-   */
-  async changePassword(currentPassword: string, newPassword: string): Promise<any> {
-    try {
-      const response = await apiClient.post('/auth/change-password', {
-        currentPassword,
-        newPassword
-      });
-      return response.data;
-    } catch (error) {
-      console.error('Change password error:', error);
-      throw error;
-    }
-  }
-
-  /**
-   * Get current user info
-   * @returns Promise with user info
-   */
-  async getUserInfo(): Promise<UserInfo> {
-    try {
-      const response = await apiClient.get<UserInfo>('/auth/me');
-      return response.data;
-    } catch (error) {
-      console.error('Error fetching user info:', error);
-      throw error;
-    }
-  }
-
-  /**
-   * Refresh authentication token
-   * @param refreshToken Refresh token
-   * @returns Promise with new tokens
-   */
-  async refreshToken(refreshToken: string): Promise<AuthTokens> {
-    try {
-      const response = await apiClient.post<AuthTokens>('/auth/refresh', { refreshToken });
       
-      // Store new tokens
+      // Store tokens
       localStorage.setItem('accessToken', response.data.accessToken);
       localStorage.setItem('refreshToken', response.data.refreshToken);
       
-      return response.data;
+      return { 
+        data: {
+          user: response.data.user,
+          accessToken: response.data.accessToken,
+          refreshToken: response.data.refreshToken
+        }
+      };
     } catch (error) {
-      console.error('Token refresh error:', error);
-      
-      // Remove invalid tokens
-      localStorage.removeItem('accessToken');
-      localStorage.removeItem('refreshToken');
-      
+      console.error('Wallet login error:', error);
       throw error;
     }
   }
-
+  
   /**
-   * Logout the current user
-   * @returns Promise with success message
+   * Log out the current user
    */
-  async logout(): Promise<any> {
-    try {
-      // Make API call to invalidate token on server
-      const response = await apiClient.post('/auth/logout');
-      
-      // Remove tokens from localStorage
-      localStorage.removeItem('accessToken');
-      localStorage.removeItem('refreshToken');
-      
-      return response.data;
-    } catch (error) {
-      console.error('Logout error:', error);
-      
-      // Remove tokens even if API call fails
-      localStorage.removeItem('accessToken');
-      localStorage.removeItem('refreshToken');
-      
-      throw error;
-    }
+  logout() {
+    localStorage.removeItem('accessToken');
+    localStorage.removeItem('refreshToken');
   }
-
+  
   /**
-   * Check if user is authenticated
-   * @returns Whether user has a valid token
+   * Check if the user is logged in
    */
-  isAuthenticated(): boolean {
+  isLoggedIn(): boolean {
     return !!localStorage.getItem('accessToken');
   }
-
-  /**
-   * Get stored access token
-   * @returns Access token or null
-   */
-  getAccessToken(): string | null {
-    return localStorage.getItem('accessToken');
-  }
 }
 
-// Create singleton instance
 export const authService = new AuthService();
-
-// Default export
-export default authService;
\ No newline at end of file
+export default authService;

=== Method Comparison ===
Methods in flat file but not in modular file:
async changePassword(
async forgotPassword(
async getUserInfo(
async logout(
async refreshToken(
async resetPassword(

Methods in modular file but not in flat file:
async getUserProfile(
async loginWithWallet(
