// filepath: /home/alivegod/Desktop/4-Ordibehesht/LastProjectendpoint/LastProject/frontend/src/components/WalletConnectButton.tsx
import React, { useState, useEffect, useRef } from 'react';
import { Button, Snackbar, Alert } from '@mui/material';
import { useWallet } from '../contexts/WalletProvider';
import { useAuth } from '../contexts/AuthProvider';
import { WalletProviderType, BlockchainType } from '../services/wallet/core/walletBase';
import { WalletSelectorModal } from './wallet-selector/WalletSelectorModal';
import { walletAuthService } from '../services/api/modules/auth';
import walletService from '../services/wallet/walletService';
import { DEFAULT_BLOCKCHAIN_NETWORK, normalizeBlockchainType } from '../config/blockchain/constants';

// TypeScript declarations for custom window properties
declare global {
  interface Window {
    walletAuthDebug?: {
      enabled: boolean;
      info: (message: string, data?: any) => void;
      error: (message: string, error?: any) => void;
      warn: (message: string, data?: any) => void;
    };
  }
}

interface WalletConnectButtonProps {
  variant?: 'contained' | 'outlined' | 'text';
  size?: 'small' | 'medium' | 'large';
  fullWidth?: boolean;
  color?: 'primary' | 'secondary' | 'success' | 'error' | 'info' | 'warning';
  className?: string;
  onConnected?: (address: string) => void;
  onError?: (error: string) => void;
  onAuthenticated?: () => void;
  redirectAfterAuth?: boolean;
  redirectUrl?: string;
}

export const WalletConnectButton: React.FC<WalletConnectButtonProps> = ({
  variant = 'contained',
  size = 'medium',
  fullWidth = false,
  color = 'primary',
  className = '',
  onConnected,
  onError,
  onAuthenticated,
  redirectAfterAuth = false,
  redirectUrl = '/profile'
}) => {
  const { isConnected, isConnecting, connect, disconnect, walletInfo, error: walletError } = useWallet();
  const { isAuthenticated, isAuthenticating, authenticateWithWallet, error: authError, authStage } = useAuth();
  const [isLoading, setIsLoading] = useState(false);
  const [buttonText, setButtonText] = useState('Connect Wallet');
  const [lastConnectionAttempt, setLastConnectionAttempt] = useState<number | null>(null);
  const [isModalOpen, setModalOpen] = useState(false);
  const [errorMessage, setErrorMessage] = useState<string | null>(null);
  const [showError, setShowError] = useState(false);
  const authInProgressRef = useRef(false);
  
  // Update button text based on state
  useEffect(() => {
    if (isLoading || isConnecting || isAuthenticating) {
      if (isConnecting) setButtonText('Connecting...');
      else if (isAuthenticating) setButtonText(`Authenticating (${authStage || 'processing'})...`);
      else setButtonText('Processing...');
    } else if (isAuthenticated && isConnected) {
      const address = walletInfo?.address || '';
      setButtonText(`Connected: ${address.slice(0, 6)}...${address.slice(-4)}`);
    } else if (isConnected) {
      setButtonText('Authenticate');
    } else {
      setButtonText('Connect Wallet');
    }
  }, [isLoading, isConnecting, isAuthenticating, isConnected, isAuthenticated, walletInfo, authStage]);

  // Handle wallet errors
  useEffect(() => {
    if (walletError) {
      setErrorMessage(walletError);
      setShowError(true);
      if (onError) onError(walletError);
    }
  }, [walletError, onError]);

  // Handle auth errors
  useEffect(() => {
    if (authError) {
      setErrorMessage(authError);
      setShowError(true);
      if (onError) onError(authError);
      // Reset auth in progress flag when there's an error
      authInProgressRef.current = false;
    }
  }, [authError, onError]);

  // Reset loading state when authentication process completes
  useEffect(() => {
    if (!isAuthenticating && authInProgressRef.current) {
      authInProgressRef.current = false;
      setIsLoading(false);
    }
  }, [isAuthenticating]);

  const handleCloseError = () => {
    setShowError(false);
  };

  const handleModalClose = () => {
    setModalOpen(false);
  };

  // Utility function to get blockchain type string from enum
  const getBlockchainName = (blockchain: BlockchainType): string => {
    switch (blockchain) {
      case BlockchainType.ETHEREUM:
        return 'ethereum';
      case BlockchainType.BINANCE:
        return 'binance';
      case BlockchainType.SOLANA:
        return 'solana';
      case BlockchainType.POLYGON:
        return DEFAULT_BLOCKCHAIN_NETWORK;
      case BlockchainType.TON:
        return 'ton';
      default:
        return DEFAULT_BLOCKCHAIN_NETWORK; // Default to polygon for unknown types for consistency
    }
  };

  // Enhanced diagnostics for wallet authentication issues
  const getAuthDiagnostics = async (walletAddress: string, blockchain?: string) => {
    try {
      // First check if the backend is reachable at all
      const healthCheck = await walletAuthService.checkHealth();
      console.log('Backend health check:', healthCheck);
      
      // Check local storage for any existing auth data
      const localAuth = {
        hasAccessToken: !!localStorage.getItem('accessToken'),
        hasRefreshToken: !!localStorage.getItem('refreshToken'),
        hasDeviceFingerprint: !!localStorage.getItem('deviceFingerprint'),
        lastWalletType: localStorage.getItem('lastConnectedWalletType') ?? 'none',
      };
      
      // Try to get a fresh challenge to verify auth endpoint is working
      let challengeResult;
      try {
        const challenge = await walletAuthService.requestChallenge(walletAddress, blockchain ?? DEFAULT_BLOCKCHAIN_NETWORK);
        challengeResult = { success: true, challenge };
      } catch (e) {
        challengeResult = { success: false, error: e };
      }
      
      return {
        walletAddress,
        blockchain: blockchain ?? DEFAULT_BLOCKCHAIN_NETWORK,
        isEndpointAvailable: !!healthCheck?.status,
        challengeResult,
        localStorageState: localAuth,
        timestamp: new Date().toISOString()
      };
    } catch (error) {
      return { error, walletAddress, blockchain, timestamp: new Date().toISOString() };
    }
  };

  const handleWalletSelect = async (result: any) => {
    try {
      if (result.success && result.walletInfo) {
        // Special handling for Trust Wallet - force blockchain to Polygon if connected
        let blockchainType = result.walletInfo.blockchain;
        const isTrustWallet = result.walletInfo.providerType === WalletProviderType.TRUST;
        
        // If using Trust Wallet, ensure we consistently report Polygon network
        if (isTrustWallet) {
          console.log('Trust Wallet detected - ensuring Polygon blockchain type');
          blockchainType = BlockchainType.POLYGON;
          result.walletInfo.blockchain = BlockchainType.POLYGON;
          
          // Check if the network is compatible with our requirements
          try {
            // Access the provider instance from the result
            const trustProvider = result.provider?.getProvider?.();
            if (trustProvider && typeof trustProvider.checkNetworkCompatibility === 'function') {
              console.log('Running Trust Wallet network compatibility check...');
              const networkStatus = await trustProvider.checkNetworkCompatibility();
              
              console.log('Trust Wallet network status:', networkStatus);
              
              if (!networkStatus.compatible) {
                console.warn('Trust Wallet is on an incompatible network');
                
                // Try to switch to Polygon network automatically
                if (networkStatus.needsSwitch && typeof trustProvider.switchNetwork === 'function') {
                  console.log('Attempting to switch to Polygon network automatically...');
                  const switched = await trustProvider.switchNetwork(networkStatus.targetChainId);
                  
                  if (!switched) {
                    console.warn('Failed to switch to Polygon network. Manual switch required.');
                    setErrorMessage('Please switch to Polygon network in Trust Wallet settings before continuing.');
                    setShowError(true);
                    setIsLoading(false);
                    return;
                  } else {
                    console.log('Successfully switched to Polygon network');
                  }
                }
              }
            }
          } catch (networkError) {
            console.error('Error checking Trust Wallet network compatibility:', networkError);
          }
        }
        
        const blockchainName = getBlockchainName(blockchainType);
        console.log(`🔗 Wallet connected successfully: ${result.walletInfo.address} (${blockchainName})`);
        setModalOpen(false);
        
        // Call onConnected callback if provided
        if (onConnected && result.walletInfo.address) {
          onConnected(result.walletInfo.address);
        }
        
        // Store blockchain type in local storage for reference
        if (typeof localStorage !== 'undefined') {
          localStorage.setItem('lastConnectedBlockchain', blockchainName);
          localStorage.setItem('lastConnectedWalletAddress', result.walletInfo.address);
          // Also store wallet provider type for Trust Wallet specific handling
          localStorage.setItem('lastConnectedWalletType', String(result.walletInfo.providerType ?? ''));
        }
        
        // Prevent concurrent authentication attempts
        if (authInProgressRef.current) {
          console.log('Authentication already in progress, skipping duplicate attempt');
          return;
        }
        
        // For Trust Wallet, add a longer wait to ensure wallet info is properly propagated
        // This fixes the "wallet info missing" error
        const syncDelay = isTrustWallet ? 2000 : 1000;
        console.log(`Waiting ${syncDelay}ms for wallet context synchronization...`);
        await new Promise(resolve => setTimeout(resolve, syncDelay));
        
        // Try to authenticate immediately after connecting
        try {
          console.log(`🔐 Attempting to authenticate with wallet: ${result.walletInfo.address} (${blockchainName})`);
          authInProgressRef.current = true;
          
          // Enhanced Trust Wallet preparation for authentication
          if (isTrustWallet) {
            console.log('Trust Wallet detected - preparing for authentication with enhanced checks');
            
            // Directly update global wallet state to ensure it's available during authentication
            // Use optional chaining for accessing walletAuthDebug
            if (window.walletAuthDebug?.info) {
              window.walletAuthDebug.info('Syncing Trust Wallet with wallet context', {
                address: result.walletInfo.address,
                blockchain: blockchainName
              });
            }
            
            // For Trust Wallet, manually sync the wallet info to ensure it's available
            // This is the key fix for the "wallet info missing" error
            if (walletService.syncWalletInfo && typeof walletService.syncWalletInfo === 'function') {
              try {
                // Create a sanitized wallet info object that won't trigger the provider.toLowerCase error
                const safeWalletInfo = {
                  address: result.walletInfo.address,
                  blockchain: BlockchainType.POLYGON,
                  chainId: 137, // Polygon chain ID
                  providerType: WalletProviderType.TRUST,
                  // Explicitly omit provider, which causes the error with toLowerCase
                };
                
                console.log('Manually syncing wallet info for', safeWalletInfo.address);
                await walletService.syncWalletInfo(safeWalletInfo);
                console.log('Trust Wallet info manually synced to wallet context');
              } catch (syncError) {
                console.error('Error syncing wallet info:', syncError);
              }
            }
            
            // Add delay for Trust Wallet authentication to ensure network change is complete
            console.log('Adding standard delay for Trust Wallet authentication...');
            await new Promise(resolve => setTimeout(resolve, 1200));
          }
          
          // Display the detailed debug information about the authentication process
          console.log('📋 Authentication context:', { 
            isAuthenticated, 
            isAuthenticating, 
            authStage,
            walletInfo: {
              address: result.walletInfo.address,
              blockchain: blockchainType,
              providerType: result.walletInfo.providerType
            }
          });
          
          // Ensure we use the provided wallet info directly from the result for authentication
          // This bypasses any potential sync issues with the context
          const effectiveBlockchain = blockchainName;
          console.log(`Using blockchain type for authentication: ${effectiveBlockchain}`);
          
          // Pass the wallet info directly to the authentication function
          const success = await authenticateWithWallet(effectiveBlockchain);
          
          if (success) {
            console.log('✅ Authentication successful!');
            onAuthenticated?.();
            if (redirectAfterAuth && redirectUrl) {
              console.log(`🔄 Redirecting to: ${redirectUrl}`);
              window.location.href = redirectUrl;
            }
          } else {
            // Authentication failed but didn't throw an error - this is our issue!
            console.warn('❌ Authentication failed without throwing an error');
            
            // Get detailed diagnostics for better error reporting
            const diagnostics = await getAuthDiagnostics(result.walletInfo.address, effectiveBlockchain);
            console.error('Authentication details:', {
              walletAddress: result.walletInfo.address,
              blockchain: effectiveBlockchain,
              authStage,
              isAuthenticating,
              currentAuthState: isAuthenticated ? 'authenticated' : 'not authenticated',
              diagnostics
            });
            
            // Better error message for Trust Wallet users
            if (isTrustWallet) {
              setErrorMessage('Trust Wallet authentication failed. Try running window.authDebugger.diagnoseWalletAuth() in the browser console.');
            } else {
              setErrorMessage('Authentication failed. Please check console for details and try again in a few moments.');
            }
            setShowError(true);
          }
        } catch (authErr) {
          console.error('❌ Error during authentication:', authErr);
          
          // Try to extract more useful error information with type guard
          let errorMessage = 'Authentication failed';
          
          if (typeof window !== 'undefined' && typeof window.extractErrorDetails === 'function') {
            const details = window.extractErrorDetails(authErr);
            errorMessage = details.message || errorMessage;
          } else if (authErr instanceof Error) {
            errorMessage = authErr.message;
          }
            
          // Set error message with wallet type information
          const walletTypeSuffix = isTrustWallet ? ' with Trust Wallet' : '';
          setErrorMessage(errorMessage + walletTypeSuffix);
          setShowError(true);
        } finally {
          authInProgressRef.current = false;
        }
      } else if (result.error) {
        console.error('❌ Wallet connection error:', result.error);
        setErrorMessage(result.error);
        setShowError(true);
        onError?.(result.error);
      }
    } catch (error) {
      console.error('❌ Wallet authentication failed:', error);
      const message = error instanceof Error ? error.message : 'Authentication failed';
      setErrorMessage(message);
      setShowError(true);
      onError?.(message);
    } finally {
      setIsLoading(false);
    }
  };

  const handleClick = async () => {
    try {
      setIsLoading(true);
      
      // If already authenticated, disconnect
      if (isAuthenticated && isConnected) {
        await disconnect();
        return;
      }
      
      // If connected but not authenticated, authenticate
      if (isConnected && walletInfo) {
        if (authInProgressRef.current) {
          console.log('Authentication already in progress, skipping duplicate attempt');
          return;
        }
        
        try {
          const blockchainName = getBlockchainName(walletInfo.blockchain);
          console.log(`🔐 Attempting to authenticate with already connected wallet: ${walletInfo.address} (${blockchainName})`);
          authInProgressRef.current = true;
          
          // Pass blockchain name as first parameter to authenticateWithWallet
          const success = await authenticateWithWallet(normalizeBlockchainType(blockchainName));
          
          if (success) {
            console.log('✅ Authentication successful!');
            onAuthenticated?.();
            if (redirectAfterAuth && redirectUrl) {
              window.location.href = redirectUrl;
            }
          } else {
            console.warn('❌ Authentication failed without error');
            // Get detailed diagnostics
            const diagnostics = await getAuthDiagnostics(walletInfo.address, blockchainName);
            console.error('Authentication diagnostics:', diagnostics);
            
            setErrorMessage('Authentication failed. Please check console for details and try again.');
            setShowError(true);
          }
        } catch (authErr) {
          console.error('❌ Auth error:', authErr);
          setErrorMessage(authErr instanceof Error ? authErr.message : 'Authentication failed');
          setShowError(true);
        } finally {
          authInProgressRef.current = false;
        }
        return;
      }
      
      // Prevent rapid repeated clicks (debounce)
      const now = Date.now();
      if (lastConnectionAttempt && now - lastConnectionAttempt < 3000) {
        console.log('Connection attempt throttled, please wait');
        return;
      }
      
      setLastConnectionAttempt(now);
      
      // Open wallet selector modal instead of connecting directly
      setModalOpen(true);
    } catch (error) {
      console.error('❌ Wallet operation failed:', error);
      const message = error instanceof Error ? error.message : 'Connection failed';
      setErrorMessage(message);
      setShowError(true);
      onError?.(message);
    } finally {
      setIsLoading(false);
    }
  };

  // Choose button color based on connection state
  const buttonColor = isAuthenticated ? 'success' : color;

  return (
    <>
      <Button
        variant={variant}
        size={size}
        fullWidth={fullWidth}
        color={buttonColor}
        className={className}
        onClick={handleClick}
        disabled={isLoading || isConnecting || isAuthenticating}
      >
        {buttonText}
      </Button>
      
      <WalletSelectorModal
        open={isModalOpen}
        onClose={handleModalClose}
        onSelect={handleWalletSelect}
      />
      
      <Snackbar 
        open={showError} 
        autoHideDuration={6000} 
        onClose={handleCloseError}
        anchorOrigin={{ vertical: 'bottom', horizontal: 'center' }}
      >
        <Alert onClose={handleCloseError} severity="error" sx={{ width: '100%' }}>
          {errorMessage ?? "An error occurred during wallet operation"}
        </Alert>
      </Snackbar>
    </>
  );
};

export default WalletConnectButton;
