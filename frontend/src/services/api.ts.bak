import axios, { AxiosInstance, AxiosRequestConfig, InternalAxiosRequestConfig, AxiosResponse } from 'axios';
import { ConnectionStatus, WebSocketManager, WebSocketError } from './websocket-manager';

// Import types for API responses
import { 
  LoginResponse, 
  RegisterResponse, 
  UserProfile, 
  DiaryEntry, 
  DiaryEntryRequest, 
  WalletData, 
  ReferralData, 
  TokenData, 
  NFTItem,
  BalanceChangeEvent,
  NftTransferEvent,
  TokenPriceEvent,
  StakingUpdateEvent,
  NotificationEvent
} from '../types/api-types';

// Define Event Bus types
interface EventBus {
  events: Record<string, Function[]>;
  on(event: string, callback: Function): () => void;
  off(event: string, callback: Function): void;
  emit(event: string, data?: any): void;
}

// Event bus for app-wide communication
const eventBus: EventBus = {
  events: {} as Record<string, Function[]>,
  on(event: string, callback: Function) {
    if (!this.events[event]) {
      this.events[event] = [];
    }
    this.events[event].push(callback);
    return () => this.off(event, callback);
  },
  off(event: string, callback: Function) {
    if (!this.events[event]) return;
    this.events[event] = this.events[event].filter((cb: Function) => cb !== callback);
  },
  emit(event: string, data?: any) {
    if (!this.events[event]) return;
    this.events[event].forEach((cb: Function) => cb(data));
  }
};

// Create WebSocket manager instance
const wsManager = new WebSocketManager(
  process.env.NEXT_PUBLIC_WS_URL || 'localhost:3000'
);

// Create API client instance
const apiClient: AxiosInstance = axios.create({
  baseURL: process.env.NEXT_PUBLIC_API_URL || 'http://localhost:3000/api',
  timeout: 15000,
  headers: {
    'Content-Type': 'application/json',
  },
});

// Request interceptor for adding auth token
apiClient.interceptors.request.use(
  (config: InternalAxiosRequestConfig) => {
    // Get token from localStorage
    const token = localStorage.getItem('accessToken');
    
    // If token exists, add to Authorization header
    if (token) {
      config.headers.set('Authorization', `Bearer ${token}`);
    }
    
    return config;
  },
  (error) => Promise.reject(error)
);

// Response interceptor for handling token refresh
apiClient.interceptors.response.use(
  (response) => response,
  async (error) => {
    const originalRequest = error.config;
    
    // If error is 401 Unauthorized and we haven't tried to refresh the token yet
    if (error.response?.status === 401 && !originalRequest._retry) {
      originalRequest._retry = true;
      
      try {
        // Get refresh token
        const refreshToken = localStorage.getItem('refreshToken');
        
        if (!refreshToken) {
          // No refresh token available, redirect to login
          window.location.href = '/login';
          return Promise.reject(error);
        }
        
        // Try to get a new access token
        const response = await axios.post(
          `${process.env.NEXT_PUBLIC_API_URL || 'http://localhost:3000/api'}/auth/refresh-token`,
          { refreshToken }
        );
        
        if (response.data.accessToken) {
          // Store the new tokens
          localStorage.setItem('accessToken', response.data.accessToken);
          if (response.data.refreshToken) {
            localStorage.setItem('refreshToken', response.data.refreshToken);
          }
          
          // Update WebSocket connection with new token
          wsManager.updateToken(response.data.accessToken);
          
          // Update the Authorization header and retry request
          originalRequest.headers.Authorization = `Bearer ${response.data.accessToken}`;
          return apiClient(originalRequest);
        }
      } catch (refreshError) {
        // Token refresh failed, redirect to login
        console.error('Token refresh failed:', refreshError);
        localStorage.removeItem('accessToken');
        localStorage.removeItem('refreshToken');
        window.location.href = '/login';
      }
    }
    
    return Promise.reject(error);
  }
);

/**
 * Authentication service
 */
export const authService = {
  /**
   * Login with email and password
   */
  login: async (email: string, password: string): Promise<AxiosResponse<LoginResponse>> => {
    const response = await apiClient.post<LoginResponse>('/auth/login', { email, password });
    
    if (response.data.accessToken) {
      // Store tokens in localStorage
      localStorage.setItem('accessToken', response.data.accessToken);
      localStorage.setItem('refreshToken', response.data.refreshToken);
      
      // Setup WebSocket connection
      await setupWebSocket(response.data.accessToken);
    }
    
    return response;
  },
  
  /**
   * Register a new user
   */
  register: (email: string, password: string, referralCode?: string) =>
    apiClient.post<RegisterResponse>('/auth/register', { 
      email, 
      password, 
      referralCode 
    }),
  
  /**
   * Login with wallet
   */
  loginWithWallet: async (walletAddress: string, signature: string, message: string) => {
    const response = await apiClient.post<LoginResponse>('/auth/wallet-login', { 
      walletAddress, 
      signature, 
      message 
    });
    
    if (response.data.accessToken) {
      localStorage.setItem('accessToken', response.data.accessToken);
      localStorage.setItem('refreshToken', response.data.refreshToken);
      
      // Setup WebSocket connection
      await setupWebSocket(response.data.accessToken);
    }
    
    return response;
  },
  
  /**
   * Get wallet connection message to sign
   */
  getWalletChallenge: (walletAddress: string) =>
    apiClient.post<{ challenge: string, walletExists: boolean }>('/auth/wallet-connect', { 
      walletAddress 
    }),
  
  /**
   * Request password reset
   */
  forgotPassword: (email: string) => 
    apiClient.post<{ message: string }>('/auth/forgot-password', { email }),
  
  /**
   * Reset password with token
   */
  resetPassword: (token: string, newPassword: string) =>
    apiClient.post<{ message: string }>('/auth/reset-password', { 
      token, 
      newPassword 
    }),
  
  /**
   * Logout current user
   */
  logout: async () => {
    try {
      await apiClient.post('/auth/logout');
    } finally {
      localStorage.removeItem('accessToken');
      localStorage.removeItem('refreshToken');
      wsManager.disconnect();
    }
  },
  
  /**
   * Get current user profile
   */
  getUserProfile: () => 
    apiClient.get<UserProfile>('/users/profile'),
  
  /**
   * Update user profile
   */
  updateUserProfile: (data: Partial<UserProfile>) => 
    apiClient.patch<UserProfile>('/users/profile', data),
};

/**
 * Diary service
 */
export const diaryService = {
  /**
   * Get all diary entries
   */
  getDiaryEntries: () =>
    apiClient.get<DiaryEntry[]>('/diary'),
  
  /**
   * Get a specific diary entry
   */
  getDiaryEntry: (entryId: string) =>
    apiClient.get<DiaryEntry>(`/diary/${entryId}`),
  
  /**
   * Create a new diary entry
   */
  createDiaryEntry: (entry: DiaryEntryRequest) =>
    apiClient.post<DiaryEntry>('/diary', entry),
  
  /**
   * Update a diary entry
   */
  updateDiaryEntry: (entryId: string, entry: Partial<DiaryEntryRequest>) =>
    apiClient.patch<DiaryEntry>(`/diary/${entryId}`, entry),
  
  /**
   * Delete a diary entry
   */
  deleteDiaryEntry: (entryId: string) =>
    apiClient.delete(`/diary/${entryId}`),
  
  /**
   * Get available diary locations
   */
  getDiaryLocations: () =>
    apiClient.get<string[]>('/diary/locations'),
};

/**
 * Wallet service for blockchain wallet operations
 */
export const walletService = {
  /**
   * Get all user wallets
   */
  getUserWallets: () =>
    apiClient.get<WalletData[]>('/wallets'),
  
  /**
   * Get details of a specific wallet
   */
  getWalletDetails: (walletId: string) =>
    apiClient.get<WalletData>(`/wallets/${walletId}`),
  
  /**
   * Create a new wallet
   */
  createWallet: () =>
    apiClient.post<WalletData>('/wallets'),
  
  /**
   * Delete a wallet
   */
  deleteWallet: (walletId: string) =>
    apiClient.delete(`/wallets/${walletId}`),
};

/**
 * NFT service for NFT operations
 */
export const nftService = {
  /**
   * Get user's NFTs
   */
  getUserNFTs: () =>
    apiClient.get<NFTItem[]>('/nft/user'),
  
  /**
   * Get details of a specific NFT
   */
  getNFTDetails: (nftId: string) =>
    apiClient.get<NFTItem>(`/nft/${nftId}`),
  
  /**
   * Mint a new NFT
   */
  mintNFT: (metadata: any) =>
    apiClient.post<{ tokenId: string, transactionHash: string }>('/nft/mint', metadata),
  
  /**
   * Transfer an NFT
   */
  transferNFT: (nftId: string, recipientAddress: string) =>
    apiClient.post<{ transactionHash: string }>(`/nft/transfer/${nftId}`, {
      recipientAddress
    }),
};

/**
 * Token service for SHAHI token operations
 */
export const tokenService = {
  /**
   * Check token balance
   */
  getBalance: () =>
    apiClient.get<{ balance: string, formattedBalance: string }>('/token/balance'),
  
  /**
   * Mint tokens (first time)
   */
  mintFirstTime: () =>
    apiClient.post<{ transactionHash: string }>('/token/mint/first-time'),
  
  /**
   * Mint annual tokens
   */
  mintAnnual: () =>
    apiClient.post<{ transactionHash: string }>('/token/mint/annual'),
  
  /**
   * Get token information
   */
  getTokenInfo: () =>
    apiClient.get<TokenData>('/token/info'),
  
  /**
   * Get token statistics
   */
  getTokenStats: () =>
    apiClient.get<{ 
      totalSupply: string, 
      circulatingSupply: string, 
      marketCap: string, 
      price: string 
    }>('/token/stats'),
};

/**
 * Referral service for managing referral codes
 */
export const referralService = {
  /**
   * Get statistics about your referrals
   */
  getReferralStats: () =>
    apiClient.get<{ 
      totalReferrals: number,
      successfulReferrals: number,
      pendingReferrals: number,
      rewardsEarned: string
    }>('/referral/stats'),
  
  /**
   * Generate a new referral code
   */
  generateReferralCode: () =>
    apiClient.post<{ code: string }>('/referral/generate'),
  
  /**
   * Toggle your referral code active status
   */
  toggleReferralCode: (isActive: boolean) =>
    apiClient.patch<{ isActive: boolean }>('/referral/toggle', { isActive }),
  
  /**
   * Get referral by code
   */
  getReferralByCode: (code: string) =>
    apiClient.get<ReferralData>(`/referral/code/${code}`),
  
  /**
   * Validate a referral code
   */
  validateReferralCode: (code: string) =>
    apiClient.post<{ isValid: boolean, message: string }>('/referral/validate', { code }),
};

/**
 * Staking service for SHAHI token staking operations
 */
export const stakingService = {
  /**
   * Get staking positions
   */
  getStakingPositions: () =>
    apiClient.get<any[]>('/staking/positions'),
  
  /**
   * Create a new staking position
   */
  stake: (data: { amount: string; lockPeriod: number }) =>
    apiClient.post<{ transactionHash: string, positionId: string }>('/staking/stake', data),
  
  /**
   * Withdraw from a staking position
   */
  withdraw: (data: { positionId: string }) =>
    apiClient.post<{ transactionHash: string }>('/staking/withdraw', data),
    
  /**
   * Claim staking rewards
   */
  claimStakingRewards: (data: { positionId: string }) =>
    apiClient.post<{ transactionHash: string }>('/staking/claim-rewards', data),
};

/**
 * Real-time service for WebSocket-based subscriptions
 */
export const realtimeService = {
  // Connection management
  connect: (token: string) => wsManager.connect(token),
  disconnect: () => wsManager.disconnect(),
  isConnected: () => wsManager.isConnected(),
  getConnectionStatus: () => wsManager.getConnectionStatus(),
  onConnectionStatusChange: (callback: (status: ConnectionStatus) => void) => 
    wsManager.onConnectionStatusChange(callback),
  
  // Error and message handling
  onError: (callback: (error: WebSocketError) => void) =>
    wsManager.onError(callback),
  onMessage: (callback: (message: any) => void) =>
    wsManager.onMessage(callback),

  // Configuration
  setAutoReconnect: (enabled: boolean, maxAttempts: number = 10) =>
    wsManager.setAutoReconnect(enabled, maxAttempts),
  
  // Connection control
  reconnect: () => wsManager.reconnect(),
  
  // Subscription management
  subscribe: (channel: string, callback: (data: any) => void) =>
    wsManager.subscribe(channel, callback),
  unsubscribe: (channel: string) =>
    wsManager.unsubscribe(channel),
  getActiveSubscriptions: () =>
    wsManager.getActiveSubscriptions(),
  
  // Connection testing
  ping: () => wsManager.ping(),
    
  // Subscribe to authentication events
  onAuthError: (callback: (error: any) => void) =>
    wsManager.subscribe('auth_error', callback),
  
  // Subscribe to specific wallet balance changes
  subscribeToBalanceChanges: (address: string, callback: (data: BalanceChangeEvent) => void) =>
    wsManager.subscribe(`balance:${address}`, callback),
  
  // Subscribe to NFT transfer events for a specific address
  subscribeToNftTransfers: (address: string, callback: (data: NftTransferEvent) => void) =>
    wsManager.subscribe(`nft:${address}`, callback),
  
  // Subscribe to token price updates
  subscribeToTokenPrice: (callback: (data: TokenPriceEvent) => void) =>
    wsManager.subscribe('token:price', callback),
    
  // Subscribe to staking rewards updates
  subscribeToStakingUpdates: (positionId: string, callback: (data: StakingUpdateEvent) => void) =>
    wsManager.subscribe(`staking:${positionId}`, callback),
    
  // Listen for system notifications
  subscribeToNotifications: (callback: (data: NotificationEvent) => void) =>
    wsManager.subscribe('notifications', callback),
};

// Event bus for app-wide communication
export const events = {
  on: eventBus.on.bind(eventBus),
  off: eventBus.off.bind(eventBus),
  emit: eventBus.emit.bind(eventBus),
};

// Helper function to set up WebSocket connection
async function setupWebSocket(token: string): Promise<void> {
  try {
    await wsManager.connect(token);
  } catch (error) {
    console.error('Failed to establish WebSocket connection:', error);
    // Still continue, as the WebSocketManager will automatically attempt reconnection
  }
}

// Export the API client instance as default
export default apiClient;

/**
 * DEPRECATED API Service Exports
 * 
 * This file is maintained for backward compatibility during transition.
 * New components should import services from the main services index:
 * 
 * import { authService, apiClient } from '../services';
 * 
 * @deprecated Use the modular imports from '../services' instead
 */

import apiClient from './api/api-client';
import { 
  ConnectionStatus,
  WebSocketManager, 
  WebSocketError 
} from './websocket-manager';

// Re-export all services from the modular structure
export * from './api';

// Re-export WebSocket types and ConnectionStatus for compatibility
export { ConnectionStatus, WebSocketManager, WebSocketError };

// Export apiClient as default for backward compatibility
export default apiClient;
