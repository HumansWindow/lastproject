name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  test:
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:14
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: alivehuman_test
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Setup Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '16'
        cache: 'yarn'
    
    - name: Install dependencies
      run: yarn install
    
    - name: Run backend tests
      run: yarn test:backend
    
    - name: Run frontend tests
      run: yarn test:frontend
    
    - name: Run admin tests
      run: yarn test:admin
  
  build-and-deploy:
    needs: test
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop')
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Setup Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '16'
        cache: 'yarn'
    
    - name: Install dependencies
      run: yarn install
    
    - name: Build all projects
      run: yarn build:all
    
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: us-east-1
    
    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1
    
    - name: Build, tag, and push image to Amazon ECR
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        ECR_REPOSITORY: alivehuman
        IMAGE_TAG: ${{ github.ref == 'refs/heads/main' && 'latest' || 'develop' }}
      run: |
        docker-compose build
        docker tag alivehuman-backend:latest $ECR_REGISTRY/$ECR_REPOSITORY:backend-$IMAGE_TAG
        docker tag alivehuman-frontend:latest $ECR_REGISTRY/$ECR_REPOSITORY:frontend-$IMAGE_TAG
        docker tag alivehuman-admin:latest $ECR_REGISTRY/$ECR_REPOSITORY:admin-$IMAGE_TAG
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:backend-$IMAGE_TAG
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:frontend-$IMAGE_TAG
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:admin-$IMAGE_TAG
    
    - name: Deploy to AWS
      run: |
        aws ecs update-service --cluster alivehuman-cluster --service alivehuman-backend-service --force-new-deployment
        aws ecs update-service --cluster alivehuman-cluster --service alivehuman-frontend-service --force-new-deployment
        aws ecs update-service --cluster alivehuman-cluster --service alivehuman-admin-service --force-new-deployment
